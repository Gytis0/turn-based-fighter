//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Inputs/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""0e636a9a-3a69-4477-90cf-dbd9e6ecab1a"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""74af08fe-9856-4137-91ac-53d4d857614a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""60c2a69e-86cc-4c57-8731-25ddf549e9ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Q"",
                    ""type"": ""Button"",
                    ""id"": ""9b1cea7c-06da-468c-bcbc-7622edf414a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""E"",
                    ""type"": ""Button"",
                    ""id"": ""bdd7bd4c-b9f3-4e30-b661-3bea18fa0531"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""G"",
                    ""type"": ""Button"",
                    ""id"": ""71a3010f-f70e-4613-9e10-6b60f69ec945"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eddb1db8-b5a4-47cd-89d4-d575080b20d7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""502f5958-3dbc-40ca-b347-c9ceb3e15c08"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c01da1b6-2ede-4142-a0b4-71fda2bcabd0"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Q"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08924d49-db62-4822-bb4f-82235f9e1e20"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""E"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3214d0e6-af34-425f-a62c-4b671295b4c7"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""G"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""27554557-31cf-41f1-bc28-2269d760e0ea"",
            ""actions"": [
                {
                    ""name"": ""StartMovingAround"",
                    ""type"": ""Button"",
                    ""id"": ""4e75bed6-8677-4cec-bb8e-afcf1ac5cc67"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveAround"",
                    ""type"": ""PassThrough"",
                    ""id"": ""646a9a6a-a56d-4bee-a83c-3962b6ff93f6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fc8f94a3-d817-4603-beca-de8880689c68"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartMovingAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fceeac42-7b1f-41c1-9116-470520cbf4d4"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""e7d6cddd-e3ef-4113-a5ac-4fe38ebd413f"",
            ""actions"": [
                {
                    ""name"": ""OpenClose instructions"",
                    ""type"": ""Button"",
                    ""id"": ""360dfd1b-e7ff-44b8-95bf-99271a6d164f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenClose dialogue"",
                    ""type"": ""Button"",
                    ""id"": ""e257ff4c-6fda-44e4-b2f5-69802f06d8ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""df37f5b1-865a-4961-91f7-cc1b91663366"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenClose instructions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""454ed87e-9fc9-4bdc-b8c2-67773de16a62"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenClose dialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_LeftClick = m_Player.FindAction("LeftClick", throwIfNotFound: true);
        m_Player_RightClick = m_Player.FindAction("RightClick", throwIfNotFound: true);
        m_Player_Q = m_Player.FindAction("Q", throwIfNotFound: true);
        m_Player_E = m_Player.FindAction("E", throwIfNotFound: true);
        m_Player_G = m_Player.FindAction("G", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_StartMovingAround = m_Camera.FindAction("StartMovingAround", throwIfNotFound: true);
        m_Camera_MoveAround = m_Camera.FindAction("MoveAround", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_OpenCloseinstructions = m_UI.FindAction("OpenClose instructions", throwIfNotFound: true);
        m_UI_OpenClosedialogue = m_UI.FindAction("OpenClose dialogue", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_LeftClick;
    private readonly InputAction m_Player_RightClick;
    private readonly InputAction m_Player_Q;
    private readonly InputAction m_Player_E;
    private readonly InputAction m_Player_G;
    public struct PlayerActions
    {
        private @InputController m_Wrapper;
        public PlayerActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_Player_LeftClick;
        public InputAction @RightClick => m_Wrapper.m_Player_RightClick;
        public InputAction @Q => m_Wrapper.m_Player_Q;
        public InputAction @E => m_Wrapper.m_Player_E;
        public InputAction @G => m_Wrapper.m_Player_G;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @LeftClick.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftClick;
                @RightClick.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightClick;
                @Q.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnQ;
                @Q.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnQ;
                @Q.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnQ;
                @E.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnE;
                @E.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnE;
                @E.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnE;
                @G.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnG;
                @G.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnG;
                @G.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnG;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @Q.started += instance.OnQ;
                @Q.performed += instance.OnQ;
                @Q.canceled += instance.OnQ;
                @E.started += instance.OnE;
                @E.performed += instance.OnE;
                @E.canceled += instance.OnE;
                @G.started += instance.OnG;
                @G.performed += instance.OnG;
                @G.canceled += instance.OnG;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_StartMovingAround;
    private readonly InputAction m_Camera_MoveAround;
    public struct CameraActions
    {
        private @InputController m_Wrapper;
        public CameraActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartMovingAround => m_Wrapper.m_Camera_StartMovingAround;
        public InputAction @MoveAround => m_Wrapper.m_Camera_MoveAround;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @StartMovingAround.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnStartMovingAround;
                @StartMovingAround.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnStartMovingAround;
                @StartMovingAround.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnStartMovingAround;
                @MoveAround.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveAround;
                @MoveAround.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveAround;
                @MoveAround.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveAround;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StartMovingAround.started += instance.OnStartMovingAround;
                @StartMovingAround.performed += instance.OnStartMovingAround;
                @StartMovingAround.canceled += instance.OnStartMovingAround;
                @MoveAround.started += instance.OnMoveAround;
                @MoveAround.performed += instance.OnMoveAround;
                @MoveAround.canceled += instance.OnMoveAround;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_OpenCloseinstructions;
    private readonly InputAction m_UI_OpenClosedialogue;
    public struct UIActions
    {
        private @InputController m_Wrapper;
        public UIActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenCloseinstructions => m_Wrapper.m_UI_OpenCloseinstructions;
        public InputAction @OpenClosedialogue => m_Wrapper.m_UI_OpenClosedialogue;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @OpenCloseinstructions.started -= m_Wrapper.m_UIActionsCallbackInterface.OnOpenCloseinstructions;
                @OpenCloseinstructions.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnOpenCloseinstructions;
                @OpenCloseinstructions.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnOpenCloseinstructions;
                @OpenClosedialogue.started -= m_Wrapper.m_UIActionsCallbackInterface.OnOpenClosedialogue;
                @OpenClosedialogue.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnOpenClosedialogue;
                @OpenClosedialogue.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnOpenClosedialogue;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OpenCloseinstructions.started += instance.OnOpenCloseinstructions;
                @OpenCloseinstructions.performed += instance.OnOpenCloseinstructions;
                @OpenCloseinstructions.canceled += instance.OnOpenCloseinstructions;
                @OpenClosedialogue.started += instance.OnOpenClosedialogue;
                @OpenClosedialogue.performed += instance.OnOpenClosedialogue;
                @OpenClosedialogue.canceled += instance.OnOpenClosedialogue;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IPlayerActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnQ(InputAction.CallbackContext context);
        void OnE(InputAction.CallbackContext context);
        void OnG(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnStartMovingAround(InputAction.CallbackContext context);
        void OnMoveAround(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnOpenCloseinstructions(InputAction.CallbackContext context);
        void OnOpenClosedialogue(InputAction.CallbackContext context);
    }
}
